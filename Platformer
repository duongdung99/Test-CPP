#include <iostream>
#include <vector>
using namespace std;

int position;
class Platformer
{
public:
    int n;
    int value;
    vector <int> v;

public:
    Platformer(int n, int value)
    {
        this->n = n;
        this->value = value;
        for (int i = 0; i < n; i++)
        {
            v.push_back(i);
        }
        position = value;
    }
    void jumpLeft()
    {
        if (position >= 2)
        {
            position = position - 2;
            value = v[position];
            v.erase(v.begin() + (position + 2));
        }
    }

    void jumpRight()
    {
        if (position <= (v.size() - 3))
        {
            position = position + 2;
            value = v[position];
            v.erase(v.begin() + (position - 2));
            position--;
        }
    }

    int getposition()
    {
        return value;
    }
};

int main()
{
    Platformer platformer(6, 3);
    std::cout << platformer.getposition() << std::endl; // should print 3
    platformer.jumpLeft();
    std::cout << platformer.getposition() << std::endl; // should print 1
    platformer.jumpRight();
    std::cout << platformer.getposition() << std::endl; // should print 4

}
